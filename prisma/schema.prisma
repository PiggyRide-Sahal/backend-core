generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  phone     String   @unique
  role      UserRole
  isActive  Boolean  @default(true)
  fcmToken  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  driver    Driver?
  parent    Parent?
  teen      Teen?
}

model Location {
  id             String       @id @default(uuid())
  name           String
  address        String
  latitude       Float
  longitude      Float
  type           LocationType
  isVerified     Boolean      @default(false)
  contactNumber  String?
  operatingHours Json?
  createdBy      String?
  verifiedBy     String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  routeStops     RouteStop[]
  teens          Teen[]
}

model Route {
  id                  String         @id @default(uuid())
  name                String
  description         String?
  routeType           RouteType
  frequency           RouteFrequency
  daysOfWeek          Int[]
  startDate           DateTime
  endDate             DateTime?
  isRecurring         Boolean        @default(false)
  baseFare            Float
  pricingType         PricingType
  perKmRate           Float?
  roundTripDiscount   Float?
  totalSeats          Int
  availableSeats      Int
  farePerSeat         Float
  status              RouteStatus    @default(PENDING_ADMIN)
  isActive            Boolean        @default(true)
  isListedPublicly    Boolean        @default(false)
  allowDriverBidding  Boolean        @default(false)
  autoApproveRequests Boolean        @default(false)
  minOccupancyRatio   Float          @default(0.4)
  maxOccupancyRatio   Float          @default(1.0)
  features            RouteFeatures?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  requests            RideRequest[]
  drivers             RouteDriver[]
  stops               RouteStop[]
  trips               Trip[]
}

model RouteStop {
  id             String        @id @default(uuid())
  routeId        String
  locationId     String
  sequence       Int
  arrivalTime    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  dropRides      Ride[]        @relation("DropStop")
  pickupRides    Ride[]        @relation("PickupStop")
  dropRequests   RideRequest[] @relation("DropStop")
  pickupRequests RideRequest[] @relation("PickupStop")
  location       Location      @relation(fields: [locationId], references: [id])
  route          Route         @relation(fields: [routeId], references: [id])
}

model RouteDriver {
  id        String    @id @default(uuid())
  routeId   String
  driverId  String
  startDate DateTime
  endDate   DateTime?
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  driver    Driver    @relation(fields: [driverId], references: [id])
  route     Route     @relation(fields: [routeId], references: [id])
}

model Trip {
  id        String     @id @default(uuid())
  routeId   String
  driverId  String
  date      DateTime
  status    TripStatus @default(SCHEDULED)
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  rides     Ride[]
  driver    Driver     @relation(fields: [driverId], references: [id])
  route     Route      @relation(fields: [routeId], references: [id])
}

model Ride {
  id                  String        @id @default(uuid())
  tripId              String
  teenId              String
  pickupStopId        String
  dropStopId          String
  status              RideStatus
  scheduledPickupTime DateTime
  actualPickupTime    DateTime?
  scheduledDropTime   DateTime
  actualDropTime      DateTime?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  dropStop            RouteStop     @relation("DropStop", fields: [dropStopId], references: [id])
  pickupStop          RouteStop     @relation("PickupStop", fields: [pickupStopId], references: [id])
  teen                Teen          @relation(fields: [teenId], references: [id])
  trip                Trip          @relation(fields: [tripId], references: [id])
  transactions        Transaction[]
}

model Parent {
  id           String        @id @default(uuid())
  userId       String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  user         User          @relation(fields: [userId], references: [id])
  rideRequests RideRequest[]
  teens        Teen[]
  wallet       Wallet?
}

model Driver {
  id                 String              @id @default(uuid())
  userId             String              @unique
  licenseNumber      String              @unique
  aadharNumber       String              @unique
  verificationStatus VerificationStatus?
  rating             Float               @default(0)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  user               User                @relation(fields: [userId], references: [id])
  verification       DriverVerification?
  routeAssignments   RouteDriver[]
  trips              Trip[]
  vehicle            Vehicle?
}

model Teen {
  id               String        @id @default(uuid())
  userId           String        @unique
  parentId         String
  inviteCode       String?       @unique
  inviteExpiry     DateTime?
  inviteStatus     InviteStatus  @default(PENDING)
  inviteType       InviteType?
  name             String
  age              Int
  grade            String?
  avatar           String?
  schoolId         String?
  emergencyContact String?
  medicalInfo      String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  rides            Ride[]
  rideRequests     RideRequest[]
  parent           Parent        @relation(fields: [parentId], references: [id])
  school           Location?     @relation(fields: [schoolId], references: [id])
  user             User          @relation(fields: [userId], references: [id])
  buddyOf          TeenBuddy[]   @relation("Buddy")
  buddies          TeenBuddy[]   @relation("TeenAsBuddy")
  rewards          TeenRewards?
}

model RideRequest {
  id                String      @id @default(uuid())
  parentId         String
  teenId           String
  routeId          String
  pickupStopId     String
  dropStopId       String
  requestType      RequestType  @default(NEW_ROUTE)
  seatsRequired    Int         @default(1)
  expectedPickupTime DateTime
  expectedDropTime   DateTime
  status           RouteStatus @default(PENDING_PARENT)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  dropStop         RouteStop   @relation("DropStop", fields: [dropStopId], references: [id])
  parent           Parent      @relation(fields: [parentId], references: [id])
  pickupStop       RouteStop   @relation("PickupStop", fields: [pickupStopId], references: [id])
  route            Route       @relation(fields: [routeId], references: [id])
  teen             Teen        @relation(fields: [teenId], references: [id])
}

model Vehicle {
  id          String   @id @default(uuid())
  driverId    String   @unique
  make        String
  model       String
  year        Int
  plateNumber String   @unique
  capacity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  driver      Driver   @relation(fields: [driverId], references: [id])
}

model DriverVerification {
  id                 String             @id @default(uuid())
  driverId           String             @unique
  status             VerificationStatus @default(PENDING)
  vehiclePhotos      String[]
  policeVerification String?
  backgroundCheck    String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  documents          Document[]
  driver             Driver             @relation(fields: [driverId], references: [id])
}

model Document {
  id             String             @id @default(uuid())
  type           DocumentType
  number         String
  expiryDate     DateTime?
  fileUrl        String
  verificationId String
  status         VerificationStatus @default(PENDING)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  verification   DriverVerification @relation(fields: [verificationId], references: [id])
}

model Wallet {
  id           String        @id @default(uuid())
  balance      Float         @default(0)
  parentId     String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  parent       Parent        @relation(fields: [parentId], references: [id])
}

model Transaction {
  id          String          @id @default(uuid())
  walletId    String
  amount      Float
  type        TransactionType
  status      PaymentStatus
  description String?
  rideId      String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ride        Ride?           @relation(fields: [rideId], references: [id])
  wallet      Wallet          @relation(fields: [walletId], references: [id])
}

model TeenBuddy {
  id        String      @id @default(uuid())
  teenId    String
  buddyId   String
  status    BuddyStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  buddy     Teen        @relation("Buddy", fields: [buddyId], references: [id])
  teen      Teen        @relation("TeenAsBuddy", fields: [teenId], references: [id])
}

model TeenRewards {
  id           String        @id @default(uuid())
  teenId       String        @unique
  points       Int           @default(0)
  level        Int           @default(1)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  achievements Achievement[]
  teen         Teen          @relation(fields: [teenId], references: [id])
}

model Achievement {
  id          String      @id @default(uuid())
  name        String
  description String
  points      Int
  rewardId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  reward      TeenRewards @relation(fields: [rewardId], references: [id])
}

model Admin {
  id          String   @id @default(uuid())
  userId      String   @unique
  permissions Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
}

model TempTrackingLink {
  id          String   @id @default(uuid())
  phoneNumber String
  deviceId    String
  deviceName  String
  trackingLink String
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RouteFeatures {
  id                String   @id @default(uuid())
  routeId           String   @unique
  liveTracking      Boolean  @default(true)
  videoSurveillance Boolean  @default(true)
  childLocks        Boolean  @default(true)
  speedMonitoring   Boolean  @default(true)
  ac                Boolean  @default(true)
  parentAlerts      Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  route             Route    @relation(fields: [routeId], references: [id])
}

enum UserRole {
  PARENT
  DRIVER
  TEEN
  ADMIN
}

enum LocationType {
  SCHOOL
  BUSINESS
  RESIDENTIAL
  BUS_STOP
  LANDMARK
  OTHER
}

enum RouteType {
  ADMIN_CREATED
  DRIVER_CREATED
  PARENT_CREATED
  TEEN_REQUESTED
}

enum RouteStatus {
  PENDING_TEEN
  PENDING_PARENT
  PENDING_DRIVER
  PENDING_ADMIN
  ACTIVE
  COMPLETED
  CANCELLED
}

enum RouteFrequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum PricingType {
  FIXED
  PER_KM
  ZONE_BASED
}

enum TripStatus {
  SCHEDULED
  DRIVER_ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum RideStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  PICKUP_PENDING
  PICKED_UP
  DROP_PENDING
  DROPPED_OFF
  CANCELLED
  NO_SHOW
}

enum TransactionType {
  TOPUP
  RIDE_PAYMENT
  REFUND
  REWARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum BuddyStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum InviteType {
  PARENT_TO_TEEN
  TEEN_TO_PARENT
}

enum DocumentType {
  DRIVING_LICENSE
  AADHAR_CARD
  VEHICLE_RC
  INSURANCE
  POLICE_VERIFICATION
}

enum VerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum RequestType {
  NEW_ROUTE
  JOIN_EXISTING
  TEMPORARY
  RECURRING
}
