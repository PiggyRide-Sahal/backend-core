
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  role: 'role',
  isActive: 'isActive',
  fcmToken: 'fcmToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  latitude: 'latitude',
  longitude: 'longitude',
  type: 'type',
  isVerified: 'isVerified',
  contactNumber: 'contactNumber',
  operatingHours: 'operatingHours',
  createdBy: 'createdBy',
  verifiedBy: 'verifiedBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  routeType: 'routeType',
  frequency: 'frequency',
  daysOfWeek: 'daysOfWeek',
  startDate: 'startDate',
  endDate: 'endDate',
  isRecurring: 'isRecurring',
  baseFare: 'baseFare',
  pricingType: 'pricingType',
  perKmRate: 'perKmRate',
  roundTripDiscount: 'roundTripDiscount',
  totalSeats: 'totalSeats',
  availableSeats: 'availableSeats',
  farePerSeat: 'farePerSeat',
  status: 'status',
  isActive: 'isActive',
  isListedPublicly: 'isListedPublicly',
  allowDriverBidding: 'allowDriverBidding',
  autoApproveRequests: 'autoApproveRequests',
  minOccupancyRatio: 'minOccupancyRatio',
  maxOccupancyRatio: 'maxOccupancyRatio',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RouteStopScalarFieldEnum = {
  id: 'id',
  routeId: 'routeId',
  locationId: 'locationId',
  sequence: 'sequence',
  arrivalTime: 'arrivalTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RouteDriverScalarFieldEnum = {
  id: 'id',
  routeId: 'routeId',
  driverId: 'driverId',
  startDate: 'startDate',
  endDate: 'endDate',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TripScalarFieldEnum = {
  id: 'id',
  routeId: 'routeId',
  driverId: 'driverId',
  date: 'date',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RideScalarFieldEnum = {
  id: 'id',
  tripId: 'tripId',
  teenId: 'teenId',
  pickupStopId: 'pickupStopId',
  dropStopId: 'dropStopId',
  status: 'status',
  scheduledPickupTime: 'scheduledPickupTime',
  actualPickupTime: 'actualPickupTime',
  scheduledDropTime: 'scheduledDropTime',
  actualDropTime: 'actualDropTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ParentScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  licenseNumber: 'licenseNumber',
  aadharNumber: 'aadharNumber',
  verificationStatus: 'verificationStatus',
  rating: 'rating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeenScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  parentId: 'parentId',
  inviteCode: 'inviteCode',
  inviteExpiry: 'inviteExpiry',
  inviteStatus: 'inviteStatus',
  inviteType: 'inviteType',
  name: 'name',
  age: 'age',
  grade: 'grade',
  avatar: 'avatar',
  schoolId: 'schoolId',
  emergencyContact: 'emergencyContact',
  medicalInfo: 'medicalInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RideRequestScalarFieldEnum = {
  id: 'id',
  parentId: 'parentId',
  teenId: 'teenId',
  routeId: 'routeId',
  pickupStopId: 'pickupStopId',
  dropStopId: 'dropStopId',
  requestType: 'requestType',
  seatsRequired: 'seatsRequired',
  expectedPickupTime: 'expectedPickupTime',
  expectedDropTime: 'expectedDropTime',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  make: 'make',
  model: 'model',
  year: 'year',
  plateNumber: 'plateNumber',
  capacity: 'capacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DriverVerificationScalarFieldEnum = {
  id: 'id',
  driverId: 'driverId',
  status: 'status',
  vehiclePhotos: 'vehiclePhotos',
  policeVerification: 'policeVerification',
  backgroundCheck: 'backgroundCheck',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DocumentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  number: 'number',
  expiryDate: 'expiryDate',
  fileUrl: 'fileUrl',
  verificationId: 'verificationId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  balance: 'balance',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  amount: 'amount',
  type: 'type',
  status: 'status',
  description: 'description',
  rideId: 'rideId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeenBuddyScalarFieldEnum = {
  id: 'id',
  teenId: 'teenId',
  buddyId: 'buddyId',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TeenRewardsScalarFieldEnum = {
  id: 'id',
  teenId: 'teenId',
  points: 'points',
  level: 'level',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  points: 'points',
  rewardId: 'rewardId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissions: 'permissions',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TempTrackingLinkScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  deviceId: 'deviceId',
  deviceName: 'deviceName',
  trackingLink: 'trackingLink',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RouteFeaturesScalarFieldEnum = {
  id: 'id',
  routeId: 'routeId',
  liveTracking: 'liveTracking',
  videoSurveillance: 'videoSurveillance',
  childLocks: 'childLocks',
  speedMonitoring: 'speedMonitoring',
  ac: 'ac',
  parentAlerts: 'parentAlerts',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  PARENT: 'PARENT',
  DRIVER: 'DRIVER',
  TEEN: 'TEEN',
  ADMIN: 'ADMIN'
};

exports.LocationType = exports.$Enums.LocationType = {
  SCHOOL: 'SCHOOL',
  BUSINESS: 'BUSINESS',
  RESIDENTIAL: 'RESIDENTIAL',
  BUS_STOP: 'BUS_STOP',
  LANDMARK: 'LANDMARK',
  OTHER: 'OTHER'
};

exports.RouteType = exports.$Enums.RouteType = {
  ADMIN_CREATED: 'ADMIN_CREATED',
  DRIVER_CREATED: 'DRIVER_CREATED',
  PARENT_CREATED: 'PARENT_CREATED',
  TEEN_REQUESTED: 'TEEN_REQUESTED'
};

exports.RouteFrequency = exports.$Enums.RouteFrequency = {
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY'
};

exports.PricingType = exports.$Enums.PricingType = {
  FIXED: 'FIXED',
  PER_KM: 'PER_KM',
  ZONE_BASED: 'ZONE_BASED'
};

exports.RouteStatus = exports.$Enums.RouteStatus = {
  PENDING_TEEN: 'PENDING_TEEN',
  PENDING_PARENT: 'PENDING_PARENT',
  PENDING_DRIVER: 'PENDING_DRIVER',
  PENDING_ADMIN: 'PENDING_ADMIN',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.TripStatus = exports.$Enums.TripStatus = {
  SCHEDULED: 'SCHEDULED',
  DRIVER_ASSIGNED: 'DRIVER_ASSIGNED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.RideStatus = exports.$Enums.RideStatus = {
  SCHEDULED: 'SCHEDULED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  PICKUP_PENDING: 'PICKUP_PENDING',
  PICKED_UP: 'PICKED_UP',
  DROP_PENDING: 'DROP_PENDING',
  DROPPED_OFF: 'DROPPED_OFF',
  CANCELLED: 'CANCELLED',
  NO_SHOW: 'NO_SHOW'
};

exports.VerificationStatus = exports.$Enums.VerificationStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED'
};

exports.InviteStatus = exports.$Enums.InviteStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  EXPIRED: 'EXPIRED',
  REJECTED: 'REJECTED'
};

exports.InviteType = exports.$Enums.InviteType = {
  PARENT_TO_TEEN: 'PARENT_TO_TEEN',
  TEEN_TO_PARENT: 'TEEN_TO_PARENT'
};

exports.RequestType = exports.$Enums.RequestType = {
  NEW_ROUTE: 'NEW_ROUTE',
  JOIN_EXISTING: 'JOIN_EXISTING',
  TEMPORARY: 'TEMPORARY',
  RECURRING: 'RECURRING'
};

exports.DocumentType = exports.$Enums.DocumentType = {
  DRIVING_LICENSE: 'DRIVING_LICENSE',
  AADHAR_CARD: 'AADHAR_CARD',
  VEHICLE_RC: 'VEHICLE_RC',
  INSURANCE: 'INSURANCE',
  POLICE_VERIFICATION: 'POLICE_VERIFICATION'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  TOPUP: 'TOPUP',
  RIDE_PAYMENT: 'RIDE_PAYMENT',
  REFUND: 'REFUND',
  REWARD: 'REWARD'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  REFUNDED: 'REFUNDED'
};

exports.BuddyStatus = exports.$Enums.BuddyStatus = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  BLOCKED: 'BLOCKED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Location: 'Location',
  Route: 'Route',
  RouteStop: 'RouteStop',
  RouteDriver: 'RouteDriver',
  Trip: 'Trip',
  Ride: 'Ride',
  Parent: 'Parent',
  Driver: 'Driver',
  Teen: 'Teen',
  RideRequest: 'RideRequest',
  Vehicle: 'Vehicle',
  DriverVerification: 'DriverVerification',
  Document: 'Document',
  Wallet: 'Wallet',
  Transaction: 'Transaction',
  TeenBuddy: 'TeenBuddy',
  TeenRewards: 'TeenRewards',
  Achievement: 'Achievement',
  Admin: 'Admin',
  TempTrackingLink: 'TempTrackingLink',
  RouteFeatures: 'RouteFeatures'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
